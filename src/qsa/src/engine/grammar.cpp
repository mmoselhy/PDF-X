/*  A Bison parser, made from grammar.y
 by  GNU Bison version 1.27
  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse qsyyparse
#define yylex qsyylex
#define yyerror qsyyerror
#define yylval qsyylval
#define yychar qsyychar
#define yydebug qsyydebug
#define yynerrs qsyynerrs
#define YYLSP_NEEDED

#define	NULLTOKEN	257
#define	TRUETOKEN	258
#define	FALSETOKEN	259
#define	STRING	260
#define	NUMBER	261
#define	BREAK	262
#define	CASE	263
#define	DEFAULT	264
#define	FOR	265
#define	NEW	266
#define	VAR	267
#define	CONTINUE	268
#define	FUNCTION	269
#define	RETURN	270
#define	QS_VOID	271
#define	QS_DELETE	272
#define	IF	273
#define	THIS	274
#define	DO	275
#define	WHILE	276
#define	ELSE	277
#define	QS_IN	278
#define	INSTANCEOF	279
#define	TYPEOF	280
#define	IS	281
#define	SWITCH	282
#define	WITH	283
#define	RESERVED	284
#define	THROW	285
#define	TRY	286
#define	CATCH	287
#define	FINALLY	288
#define	CLASS	289
#define	CONSTRUCTOR	290
#define	EXTENDS	291
#define	ABSTRACT	292
#define	FINAL	293
#define	PRIVATE	294
#define	PUBLIC	295
#define	STATIC	296
#define	QS_CONST	297
#define	PACKAGE	298
#define	IMPORT	299
#define	EQEQ	300
#define	NE	301
#define	STREQ	302
#define	STRNEQ	303
#define	LE	304
#define	GE	305
#define	OR	306
#define	AND	307
#define	PLUSPLUS	308
#define	MINUSMINUS	309
#define	LSHIFT	310
#define	RSHIFT	311
#define	URSHIFT	312
#define	PLUSEQUAL	313
#define	MINUSEQUAL	314
#define	MULTEQUAL	315
#define	DIVEQUAL	316
#define	LSHIFTEQUAL	317
#define	RSHIFTEQUAL	318
#define	URSHIFTEQUAL	319
#define	ANDEQUAL	320
#define	MODEQUAL	321
#define	XOREQUAL	322
#define	OREQUAL	323
#define	IDENT	324

#line 1 "grammar.y"

/****************************************************************************
** $Id$
**
** Copyright (C) 2001-2006 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt Script for Applications framework (QSA).
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding a valid Qt Script for Applications license may use
** this file in accordance with the Qt Script for Applications License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about QSA Commercial License Agreements.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
*****************************************************************************/

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include "qsengine.h"
#include "qslexer.h"
#include "qsnodes.h"
#include <stdlib.h>
#include <string.h>

/* default values for bison */
#define YYDEBUG 0
#define YYMAXDEPTH 0
#ifdef QSDEBUGGER
#define YYERROR_VERBOSE
#define DBG(l, s, e) { l->setLoc(s.first_line, e.last_line); } // location
#else
#undef YYLSP_NEEDED
#define DBG(l, s, e)
#endif

extern int yylex();
static int yyerror (const char *);
static bool automatic();


#line 55 "grammar.y"
typedef union {
  int                 ival;
  double              dval;
  QString             *ustr;
  QSNode                *node;
  QSStatementNode       *stat;
  QSParameterNode       *param;
  QSFunctionBodyNode    *body;
  QSFuncDeclNode        *func;
  QSClassDefNode        *clss;
  QSProgramNode         *prog;
  QSAssignExprNode      *init;
  QSSourceElementNode   *src;
  QSSourceElementsNode  *srcs;
  QSStatListNode        *slist;
  QSArgumentsNode       *args;
  QSArgumentListNode    *alist;
  QSCaseBlockNode       *cblk;
  QSClauseListNode      *clist;
  QSCaseClauseNode      *ccl;
  QSElementNode         *elm;
  QSElisionNode         *eli;
  QSTypeNode            *type;
  QSTypedVarNode        *tvar;
  QSVarBindingNode      *vbin;
  QSVarBindingListNode  *blist;
  QSAttributeNode       *attrs;
  QSAttribute            attr;
  Operator            op;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		407
#define	YYFLAG		-32768
#define	YYNTBASE	95

#define YYTRANSLATE(x) ((unsigned)(x) <= 324 ? yytranslate[x] : 168)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    84,     2,     2,     2,    86,    89,     2,    72,
    73,    85,    81,    78,    82,    80,    71,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    79,    94,    87,
    93,    88,    92,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    76,     2,    77,    90,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    74,    91,    75,    83,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    10,    12,    14,    16,    18,
    20,    24,    27,    31,    35,    39,    45,    48,    53,    54,
    56,    58,    61,    65,    71,    73,    75,    77,    79,    81,
    86,    90,    94,    96,    99,   102,   105,   110,   114,   117,
   121,   123,   127,   129,   131,   133,   136,   139,   141,   144,
   147,   150,   153,   156,   159,   162,   165,   168,   170,   174,
   178,   182,   184,   188,   192,   194,   198,   202,   206,   208,
   212,   216,   220,   224,   228,   232,   236,   238,   242,   246,
   250,   254,   256,   260,   262,   266,   268,   272,   274,   278,
   280,   284,   286,   292,   294,   298,   300,   302,   304,   306,
   308,   310,   312,   314,   316,   318,   320,   322,   324,   328,
   330,   332,   334,   337,   339,   341,   343,   345,   347,   349,
   351,   353,   355,   357,   359,   361,   363,   365,   368,   372,
   374,   377,   379,   382,   385,   391,   399,   406,   412,   422,
   433,   441,   450,   451,   453,   456,   459,   463,   467,   470,
   473,   477,   481,   484,   487,   491,   495,   501,   507,   511,
   517,   518,   520,   522,   525,   529,   534,   537,   541,   545,
   549,   553,   557,   562,   568,   571,   575,   579,   581,   585,
   592,   600,   608,   617,   618,   621,   626,   632,   634,   638,
   642,   648,   651,   655,   659,   663,   669,   670,   672,   674,
   677,   679,   681,   683,   686,   688,   690,   692,   694,   696,
   698,   700,   702,   705,   709,   711,   713,   715,   719,   721,
   725,   727,   731
};

static const short yyrhs[] = {     3,
     0,     4,     0,     5,     0,     7,     0,     6,     0,    71,
     0,    20,     0,    70,     0,    95,     0,    97,     0,    72,
   124,    73,     0,    74,    75,     0,    74,   101,    75,     0,
    76,    99,    77,     0,    76,    98,    77,     0,    76,    98,
    78,    99,    77,     0,    99,   122,     0,    98,    78,    99,
   122,     0,     0,   100,     0,    78,     0,   100,    78,     0,
   102,    79,   122,     0,   101,    78,   102,    79,   122,     0,
    70,     0,     6,     0,     7,     0,    96,     0,   153,     0,
   103,    76,   124,    77,     0,   103,    80,    70,     0,    12,
   103,   106,     0,   103,     0,    12,   104,     0,   103,   106,
     0,   105,   106,     0,   105,    76,   124,    77,     0,   105,
    80,    70,     0,    72,    73,     0,    72,   107,    73,     0,
   122,     0,   107,    78,   122,     0,   104,     0,   105,     0,
   108,     0,   108,    54,     0,   108,    55,     0,   109,     0,
    18,   110,     0,    17,   110,     0,    26,   110,     0,    54,
   110,     0,    55,   110,     0,    81,   110,     0,    82,   110,
     0,    83,   110,     0,    84,   110,     0,   110,     0,   111,
    85,   110,     0,   111,    71,   110,     0,   111,    86,   110,
     0,   111,     0,   112,    81,   111,     0,   112,    82,   111,
     0,   112,     0,   113,    56,   112,     0,   113,    57,   112,
     0,   113,    58,   112,     0,   113,     0,   114,    87,   113,
     0,   114,    88,   113,     0,   114,    50,   113,     0,   114,
    51,   113,     0,   114,    27,   113,     0,   114,    25,   113,
     0,   114,    24,   113,     0,   114,     0,   115,    46,   114,
     0,   115,    47,   114,     0,   115,    48,   114,     0,   115,
    49,   114,     0,   115,     0,   116,    89,   115,     0,   116,
     0,   117,    90,   116,     0,   117,     0,   118,    91,   117,
     0,   118,     0,   119,    53,   118,     0,   119,     0,   120,
    52,   119,     0,   120,     0,   120,    92,   122,    79,   122,
     0,   121,     0,   108,   123,   122,     0,    93,     0,    59,
     0,    60,     0,    61,     0,    62,     0,    63,     0,    64,
     0,    65,     0,    66,     0,    68,     0,    69,     0,    67,
     0,   122,     0,   124,    78,   122,     0,   126,     0,   162,
     0,   156,     0,   160,   156,     0,   148,     0,   128,     0,
   129,     0,   130,     0,   131,     0,   133,     0,   134,     0,
   135,     0,   136,     0,   137,     0,   143,     0,   144,     0,
   145,     0,   149,     0,    74,    75,     0,    74,   127,    75,
     0,   125,     0,   127,   125,     0,    94,     0,   124,    94,
     0,   124,     1,     0,    19,    72,   124,    73,   125,     0,
    19,    72,   124,    73,   125,    23,   125,     0,    21,   125,
    22,    72,   124,    73,     0,    22,    72,   124,    73,   125,
     0,    11,    72,   132,    94,   132,    94,   132,    73,   125,
     0,    11,    72,    13,   164,    94,   132,    94,   132,    73,
   125,     0,    11,    72,   108,    24,   124,    73,   125,     0,
    11,    72,    13,   165,    24,   124,    73,   125,     0,     0,
   124,     0,    14,    94,     0,    14,     1,     0,    14,    70,
    94,     0,    14,    70,     1,     0,     8,    94,     0,     8,
     1,     0,     8,    70,    94,     0,     8,    70,     1,     0,
    16,    94,     0,    16,     1,     0,    16,   124,    94,     0,
    16,   124,     1,     0,    29,    72,   124,    73,   125,     0,
    28,    72,   124,    73,   138,     0,    74,   139,    75,     0,
    74,   139,   142,   139,    75,     0,     0,   140,     0,   141,
     0,   140,   141,     0,     9,   124,    79,     0,     9,   124,
    79,   127,     0,    10,    79,     0,    10,    79,   127,     0,
    70,    79,   125,     0,    31,   124,    94,     0,    32,   126,
   146,     0,    32,   126,   147,     0,    32,   126,   146,   147,
     0,    33,    72,    70,    73,   126,     0,    34,   126,     0,
    44,   150,   155,     0,    45,   150,    94,     0,    70,     0,
   150,    80,    70,     0,    15,    70,    72,    73,   152,   155,
     0,    15,    70,    72,   154,    73,   152,   155,     0,   160,
    15,    70,    72,    73,   152,   155,     0,   160,    15,    70,
    72,   154,    73,   152,   155,     0,     0,    79,   167,     0,
    15,    72,    73,   155,     0,    15,    72,   154,    73,   155,
     0,    70,     0,    70,    79,   167,     0,   154,    78,    70,
     0,   154,    78,    70,    79,   167,     0,    74,    75,     0,
    74,   158,    75,     0,    35,    70,    94,     0,    35,    70,
   155,     0,    35,    70,    37,   167,   155,     0,     0,   158,
     0,   159,     0,   158,   159,     0,   125,     0,   151,     0,
   161,     0,   160,   161,     0,    38,     0,    39,     0,    40,
     0,    41,     0,    42,     0,     4,     0,     5,     0,    36,
     0,   163,   164,     0,   160,   163,   164,     0,    13,     0,
    43,     0,   165,     0,   164,    78,   165,     0,   166,     0,
   166,    93,   122,     0,    70,     0,    70,    79,   167,     0,
    70,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   173,   175,   176,   177,   178,   179,   184,   186,   188,   189,
   190,   191,   192,   195,   197,   198,   201,   203,   207,   209,
   212,   214,   217,   219,   223,   226,   227,   230,   232,   233,
   234,   236,   239,   241,   244,   246,   247,   248,   252,   254,
   257,   259,   262,   264,   267,   269,   270,   273,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   286,   288,   289,
   290,   293,   295,   296,   299,   301,   302,   303,   306,   308,
   310,   312,   314,   316,   318,   320,   324,   326,   327,   328,
   329,   332,   334,   337,   339,   342,   344,   347,   349,   353,
   355,   359,   361,   365,   367,   371,   373,   374,   375,   376,
   377,   378,   379,   380,   381,   382,   383,   386,   388,   391,
   393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
   403,   404,   405,   406,   407,   408,   409,   412,   414,   417,
   419,   422,   426,   429,   436,   438,   442,   444,   445,   448,
   451,   454,   459,   461,   464,   466,   470,   472,   479,   481,
   485,   487,   495,   497,   501,   502,   511,   516,   521,   523,
   527,   529,   532,   534,   537,   539,   542,   544,   547,   553,
   557,   559,   560,   563,   567,   571,   577,   581,   583,   586,
   589,   591,   594,   599,   601,   604,   606,   611,   614,   616,
   617,   621,   623,   626,   629,   631,   636,   638,   641,   643,
   646,   648,   651,   653,   656,   658,   659,   660,   661,   662,
   663,   664,   669,   672,   677,   679,   682,   684,   688,   690,
   693,   696,   702
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","NULLTOKEN",
"TRUETOKEN","FALSETOKEN","STRING","NUMBER","BREAK","CASE","DEFAULT","FOR","NEW",
"VAR","CONTINUE","FUNCTION","RETURN","QS_VOID","QS_DELETE","IF","THIS","DO",
"WHILE","ELSE","QS_IN","INSTANCEOF","TYPEOF","IS","SWITCH","WITH","RESERVED",
"THROW","TRY","CATCH","FINALLY","CLASS","CONSTRUCTOR","EXTENDS","ABSTRACT","FINAL",
"PRIVATE","PUBLIC","STATIC","QS_CONST","PACKAGE","IMPORT","EQEQ","NE","STREQ",
"STRNEQ","LE","GE","OR","AND","PLUSPLUS","MINUSMINUS","LSHIFT","RSHIFT","URSHIFT",
"PLUSEQUAL","MINUSEQUAL","MULTEQUAL","DIVEQUAL","LSHIFTEQUAL","RSHIFTEQUAL",
"URSHIFTEQUAL","ANDEQUAL","MODEQUAL","XOREQUAL","OREQUAL","IDENT","'/'","'('",
"')'","'{'","'}'","'['","']'","','","':'","'.'","'+'","'-'","'~'","'!'","'*'",
"'%'","'<'","'>'","'&'","'^'","'|'","'?'","'='","';'","Literal","PrimaryExpr",
"ArrayLiteral","ElementList","ElisionOpt","Elision","PropertyNameAndValueList",
"PropertyName","MemberExpr","NewExpr","CallExpr","Arguments","ArgumentList",
"LeftHandSideExpr","PostfixExpr","UnaryExpr","MultiplicativeExpr","AdditiveExpr",
"ShiftExpr","RelationalExpr","EqualityExpr","BitwiseANDExpr","BitwiseXORExpr",
"BitwiseORExpr","LogicalANDExpr","LogicalORExpr","ConditionalExpr","AssignmentExpr",
"AssignmentOperator","Expr","Statement","Block","StatementList","EmptyStatement",
"ExprStatement","IfStatement","IterationStatement","ExprOpt","ContinueStatement",
"BreakStatement","ReturnStatement","WithStatement","SwitchStatement","CaseBlock",
"CaseClausesOpt","CaseClauses","CaseClause","DefaultClause","LabelledStatement",
"ThrowStatement","TryStatement","Catch","Finally","PackageDefinition","ImportStatement",
"PackageName","FunctionDeclaration","ResultSignature","FunctionExpr","FormalParameterList",
"FunctionBody","ClassDefinition","Program","SourceElements","SourceElement",
"Attributes","Attribute","VariableDefinition","VariableDefinitionKind","VariableBindingList",
"VariableBinding","TypedVariable","TypeExpression", NULL
};
#endif

static const short yyr1[] = {     0,
    95,    95,    95,    95,    95,    95,    96,    96,    96,    96,
    96,    96,    96,    97,    97,    97,    98,    98,    99,    99,
   100,   100,   101,   101,   102,   102,   102,   103,   103,   103,
   103,   103,   104,   104,   105,   105,   105,   105,   106,   106,
   107,   107,   108,   108,   109,   109,   109,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   110,   111,   111,   111,
   111,   112,   112,   112,   113,   113,   113,   113,   114,   114,
   114,   114,   114,   114,   114,   114,   115,   115,   115,   115,
   115,   116,   116,   117,   117,   118,   118,   119,   119,   120,
   120,   121,   121,   122,   122,   123,   123,   123,   123,   123,
   123,   123,   123,   123,   123,   123,   123,   124,   124,   125,
   125,   125,   125,   125,   125,   125,   125,   125,   125,   125,
   125,   125,   125,   125,   125,   125,   125,   126,   126,   127,
   127,   128,   129,   129,   130,   130,   131,   131,   131,   131,
   131,   131,   132,   132,   133,   133,   133,   133,   134,   134,
   134,   134,   135,   135,   135,   135,   136,   137,   138,   138,
   139,   139,   140,   140,   141,   141,   142,   142,   143,   144,
   145,   145,   145,   146,   147,   148,   149,   150,   150,   151,
   151,   151,   151,   152,   152,   153,   153,   154,   154,   154,
   154,   155,   155,   156,   156,   156,   157,   157,   158,   158,
   159,   159,   160,   160,   161,   161,   161,   161,   161,   161,
   161,   161,   162,   162,   163,   163,   164,   164,   165,   165,
   166,   166,   167
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     3,     2,     3,     3,     3,     5,     2,     4,     0,     1,
     1,     2,     3,     5,     1,     1,     1,     1,     1,     4,
     3,     3,     1,     2,     2,     2,     4,     3,     2,     3,
     1,     3,     1,     1,     1,     2,     2,     1,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     1,     3,     3,
     3,     1,     3,     3,     1,     3,     3,     3,     1,     3,
     3,     3,     3,     3,     3,     3,     1,     3,     3,     3,
     3,     1,     3,     1,     3,     1,     3,     1,     3,     1,
     3,     1,     5,     1,     3,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
     1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     3,     1,
     2,     1,     2,     2,     5,     7,     6,     5,     9,    10,
     7,     8,     0,     1,     2,     2,     3,     3,     2,     2,
     3,     3,     2,     2,     3,     3,     5,     5,     3,     5,
     0,     1,     1,     2,     3,     4,     2,     3,     3,     3,
     3,     3,     4,     5,     2,     3,     3,     1,     3,     6,
     7,     7,     8,     0,     2,     4,     5,     1,     3,     3,
     5,     2,     3,     3,     3,     5,     0,     1,     1,     2,
     1,     1,     1,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     2,     3,     1,     1,     1,     3,     1,     3,
     1,     3,     1
};

static const short yydefact[] = {   197,
     1,     2,     3,     5,     4,     0,     0,     0,   215,     0,
     0,     0,     0,     0,     0,     7,     0,     0,     0,     0,
     0,     0,     0,     0,   212,   205,   206,   207,   208,   209,
   216,     0,     0,     0,     0,     8,     6,     0,     0,    19,
     0,     0,     0,     0,   132,     9,    28,    10,    33,    43,
    44,    45,    48,    58,    62,    65,    69,    77,    82,    84,
    86,    88,    90,    92,    94,   108,     0,   201,   110,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   114,   127,   202,    29,   112,   198,   199,     0,   203,
   111,     0,   150,     0,   149,   143,     2,     3,     0,     8,
     0,    33,    34,   146,     0,   145,     0,     0,   154,   153,
     0,    45,    50,    49,     0,     0,     0,     0,    51,     0,
     0,     0,     0,     0,     0,   178,     0,     0,    52,    53,
     0,     0,     5,     4,     8,    12,     0,     0,   130,     0,
    21,     0,     0,    20,    54,    55,    56,    57,     0,     0,
     0,    35,     0,     0,    36,    46,    47,    97,    98,    99,
   100,   101,   102,   103,   104,   107,   105,   106,    96,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   134,     0,   133,   200,   210,
   211,     0,   113,   204,     0,   221,   213,   217,   219,   152,
   151,     0,    45,   144,     0,    26,    27,    25,    12,    32,
   148,   147,     0,   188,     0,     0,   156,   155,     0,     0,
     0,     0,     0,   170,   128,     0,     0,   171,   172,     0,
     0,   194,   195,     0,   176,   177,   169,    11,    13,     0,
     0,   129,   131,    15,    19,    14,    17,    22,    39,     0,
    41,     0,    31,     0,    38,    95,    60,    59,    61,    63,
    64,    66,    67,    68,    76,    75,    74,    72,    73,    70,
    71,    78,    79,    80,    81,    83,    85,    87,    89,    91,
     0,   109,     0,   214,     0,     0,     0,     0,   217,     0,
   143,   184,     0,     0,   186,     0,     0,     0,     0,     0,
     0,     0,     0,   175,   173,   223,     0,   192,     0,   179,
     0,    23,     0,    40,     0,    30,    37,     0,     0,   222,
   218,   220,   143,     0,     0,     0,     0,     0,   184,   189,
   187,   190,   135,     0,   138,   161,   158,   157,     0,   196,
   193,     0,    16,    18,    42,    93,   184,     0,     0,     0,
     0,   143,   185,   180,     0,     0,     0,   137,     0,     0,
   162,   163,     0,    24,     0,   184,   143,     0,   141,     0,
   181,   191,   136,     0,     0,   159,   161,   164,   174,   182,
     0,     0,   142,     0,   165,   167,     0,   183,     0,   139,
   166,   168,   160,   140,     0,     0,     0
};

static const short yydefgoto[] = {    46,
    47,    48,   142,   143,   144,   137,   138,    49,    50,    51,
   152,   260,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,   170,    67,    68,
    69,   140,    70,    71,    72,    73,   215,    74,    75,    76,
    77,    78,   347,   370,   371,   372,   387,    79,    80,    81,
   238,   239,    82,    83,   127,    84,   338,    85,   226,   243,
    86,   405,    87,    88,   117,    90,    91,    92,   207,   208,
   209,   317
};

static const short yypact[] = {   827,
-32768,   264,   332,-32768,-32768,    19,   -56,  1130,-32768,    27,
   106,    64,  1159,  1159,   -46,-32768,   911,   -24,  1159,   -10,
    24,  1159,     3,    32,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,    60,    60,  1159,  1159,    49,-32768,  1159,   407,    79,
  1159,  1159,  1159,  1159,-32768,-32768,-32768,-32768,    61,-32768,
   112,   908,-32768,-32768,    58,   104,    93,   156,   206,    70,
   119,    86,   158,   -38,-32768,-32768,     9,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   827,-32768,  1211,-32768,
-32768,   145,-32768,    28,-32768,   149,-32768,-32768,   130,-32768,
    50,    61,-32768,-32768,    30,-32768,   150,    38,-32768,-32768,
    22,   184,-32768,-32768,  1159,   204,  1223,  1159,-32768,  1159,
  1159,   -43,   491,   214,     0,-32768,    25,   -42,-32768,-32768,
   911,   -28,   166,   181,    49,  1003,    20,   187,-32768,   575,
-32768,   194,   258,   196,-32768,-32768,-32768,-32768,  1046,  1159,
   218,-32768,  1159,   222,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1159,
  1159,  1159,  1159,  1159,  1159,  1159,  1159,  1159,  1159,  1159,
  1159,  1159,  1159,  1159,  1159,  1159,  1159,  1159,  1159,  1159,
  1159,  1159,  1159,  1159,  1159,-32768,  1159,-32768,-32768,-32768,
-32768,   224,-32768,-32768,   145,   241,   223,-32768,   217,-32768,
-32768,   145,  1128,   243,   232,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   117,   246,   253,     2,-32768,-32768,    53,   259,
    54,    87,    95,-32768,-32768,   261,     3,   304,-32768,   273,
   659,-32768,-32768,   276,-32768,-32768,-32768,-32768,-32768,    18,
  1159,-32768,-32768,-32768,    79,-32768,-32768,-32768,-32768,   101,
-32768,   219,-32768,   231,-32768,-32768,-32768,-32768,-32768,    58,
    58,   104,   104,   104,    93,    93,    93,    93,    93,    93,
    93,   156,   156,   156,   156,   206,    70,   119,    86,   158,
   269,-32768,   277,   223,   273,   145,  1159,   -39,   329,  1159,
  1159,   275,   132,   273,-32768,   253,   285,   911,  1159,   911,
   282,   911,   287,-32768,-32768,-32768,   253,-32768,   743,-32768,
   280,-32768,  1077,-32768,  1159,-32768,-32768,  1159,   154,-32768,
-32768,-32768,  1159,  1159,   135,   266,   273,   253,   275,-32768,
-32768,   283,   340,   139,-32768,   355,-32768,-32768,   292,-32768,
-32768,  1159,-32768,-32768,-32768,-32768,   275,   162,   286,   164,
   911,  1159,-32768,-32768,   253,   273,   911,-32768,  1159,    -2,
   355,-32768,     3,-32768,   253,   275,  1159,   911,-32768,   296,
-32768,-32768,-32768,   236,   297,-32768,   355,-32768,-32768,-32768,
   253,   308,-32768,   911,   911,   911,   341,-32768,   911,-32768,
   911,   911,-32768,-32768,   383,   417,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,   175,-32768,-32768,   182,   423,   426,-32768,
   -30,-32768,   215,-32768,    -1,   142,   109,    16,    94,   247,
   249,   252,   248,   260,-32768,-32768,  -134,-32768,   -11,   -17,
   -21,   -77,-32768,-32768,-32768,-32768,  -284,-32768,-32768,-32768,
-32768,-32768,-32768,    66,-32768,    84,-32768,-32768,-32768,-32768,
-32768,   220,-32768,-32768,   424,-32768,  -293,-32768,  -217,  -124,
   -70,-32768,   225,   -83,     5,   -59,-32768,   -57,  -146,  -205,
-32768,  -251
};


#define	YYLAST		1266


static const short yytable[] = {   116,
   111,   124,   245,   199,    89,   303,   299,   385,   257,   196,
   122,   113,   114,   194,   261,    96,   336,   119,   203,    93,
   155,   139,   227,   216,   217,   115,   132,   104,   210,   204,
   221,   205,   129,   130,   197,   266,   240,   244,   296,   145,
   146,   147,   148,   330,   248,   365,   203,   118,   359,   197,
   234,   246,   340,   195,   333,   216,   217,   204,   294,   205,
   291,   120,   292,   375,   109,   298,     1,    97,    98,     4,
     5,   220,   386,   241,   306,     8,   123,   380,    99,   307,
    13,    14,   391,    16,   214,   363,   197,   218,    94,    19,
   331,    89,   392,   242,   249,   121,   105,   250,   241,   197,
   305,   125,   198,   229,   244,   139,   231,   224,   232,   233,
   225,   358,    95,   247,   382,   228,   322,    34,    35,   218,
   106,   211,   253,   222,   219,   308,   310,   131,   171,   126,
   197,   197,   149,   100,    37,    38,   150,   101,   262,    40,
   151,   264,   172,   173,    41,    42,    43,    44,   176,   177,
   178,     1,    97,    98,     4,     5,   141,   110,   190,   311,
     8,   212,   332,    99,   197,    13,    14,   312,    16,   267,
   268,   269,   197,   324,    19,   107,   192,   108,   325,   179,
   180,   341,   181,   149,   174,   175,   224,   153,   354,   302,
   355,   154,   350,   356,   275,   276,   277,   278,   279,   280,
   281,   108,    34,    35,   339,   182,   183,   361,   191,   307,
   193,   368,   197,   364,   206,   314,   197,   374,   100,    37,
    38,   223,   101,   224,    40,   230,   357,   112,   112,    41,
    42,    43,    44,   112,   376,   199,   378,   156,   157,   307,
   381,   197,   184,   185,   -26,    89,   236,   237,   112,   112,
   390,   186,   187,   188,   189,   112,   112,   112,   112,   -27,
     1,    97,    98,     4,     5,   251,   398,  -210,  -210,     8,
   254,   255,    99,   258,    13,    14,  -210,    16,  -210,   282,
   283,   284,   285,    19,   272,   273,   274,   263,   335,   214,
   343,   265,   345,   293,   348,   326,   197,   344,  -210,  -210,
   296,  -210,  -210,  -210,  -210,  -210,  -210,   327,   197,   297,
   213,    34,    35,   197,   395,   270,   271,   401,   402,   295,
   197,   214,   360,    89,   304,   301,   241,   100,    37,    38,
   309,   101,   313,    40,   256,  -211,  -211,   237,    41,    42,
    43,    44,   316,   379,  -211,   320,  -211,   328,   329,   383,
   214,   389,   334,   337,   342,   346,   349,   384,   352,   362,
   393,   366,   367,   369,   373,   214,  -211,  -211,   394,  -211,
  -211,  -211,  -211,  -211,  -211,   396,   400,   139,   139,   377,
   399,   404,   406,   253,   253,   112,   112,   112,   112,   112,
   112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
   112,   112,   112,   112,   112,   112,   112,   112,   112,     1,
     2,     3,   133,   134,     6,   403,   407,     7,     8,     9,
    10,    99,    12,    13,    14,    15,    16,    17,    18,   323,
   102,   321,    19,   103,    20,    21,   286,    22,    23,   287,
   289,    24,    25,   288,    26,    27,    28,    29,    30,    31,
    32,    33,   397,   290,   388,     0,   128,   315,     0,     0,
    34,    35,     0,     0,     0,   319,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   135,    37,    38,     0,
    39,   136,    40,     0,     0,     0,     0,    41,    42,    43,
    44,     0,     0,     1,     2,     3,     4,     5,     6,     0,
    45,     7,     8,     9,    10,    99,    12,    13,    14,    15,
    16,    17,    18,     0,     0,     0,    19,     0,    20,    21,
     0,    22,    23,     0,     0,    24,    25,     0,    26,    27,
    28,    29,    30,    31,    32,    33,     0,     0,     0,     0,
     0,     0,     0,     0,    34,    35,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    36,    37,    38,     0,    39,   235,    40,     0,     0,     0,
     0,    41,    42,    43,    44,     0,     0,     1,     2,     3,
     4,     5,     6,     0,    45,     7,     8,     9,    10,    99,
    12,    13,    14,    15,    16,    17,    18,     0,     0,     0,
    19,     0,    20,    21,     0,    22,    23,     0,     0,    24,
    25,     0,    26,    27,    28,    29,    30,    31,    32,    33,
     0,     0,     0,     0,     0,     0,     0,     0,    34,    35,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    36,    37,    38,     0,    39,   252,
    40,     0,     0,     0,     0,    41,    42,    43,    44,     0,
     0,     1,     2,     3,     4,     5,     6,     0,    45,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,     0,     0,     0,    19,     0,    20,    21,     0,    22,
    23,     0,     0,    24,    25,     0,    26,    27,    28,    29,
    30,    31,    32,    33,     0,     0,     0,     0,     0,     0,
     0,     0,    34,    35,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    36,    37,
    38,     0,    39,   318,    40,     0,     0,     0,     0,    41,
    42,    43,    44,     0,     0,     1,     2,     3,     4,     5,
     6,     0,    45,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,     0,     0,     0,    19,     0,
    20,    21,     0,    22,    23,     0,     0,    24,    25,     0,
    26,    27,    28,    29,    30,    31,    32,    33,     0,     0,
     0,     0,     0,     0,     0,     0,    34,    35,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    36,    37,    38,     0,    39,   351,    40,     0,
     0,     0,     0,    41,    42,    43,    44,     0,     0,     1,
     2,     3,     4,     5,     6,     0,    45,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,     0,
     0,     0,    19,     0,    20,    21,     0,    22,    23,     0,
     0,    24,    25,     0,    26,    27,    28,    29,    30,    31,
    32,    33,     0,     0,     0,     0,     0,     0,     0,     0,
    34,    35,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    36,    37,    38,     0,
    39,     0,    40,     0,     0,     0,     0,    41,    42,    43,
    44,     0,     0,     1,     2,     3,     4,     5,     6,     0,
    45,     7,     8,     9,    10,    99,    12,    13,    14,    15,
    16,    17,    18,     0,     0,     0,    19,     0,    20,    21,
     0,    22,    23,     0,     0,    24,    25,     0,    26,    27,
    28,    29,    30,    31,    32,    33,     0,     0,     0,     0,
     0,   156,   157,     0,    34,    35,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,     0,     0,     0,
    36,    37,    38,     0,    39,     0,    40,     0,     0,     0,
     0,    41,    42,    43,    44,     0,     0,     0,     0,     0,
   169,     0,  -128,     0,    45,  -128,  -128,  -128,  -128,  -128,
  -128,  -128,  -128,  -128,  -128,  -128,  -128,  -128,  -128,  -128,
  -128,  -128,  -128,  -128,  -128,  -128,     0,     0,  -128,     0,
  -128,  -128,     0,  -128,  -128,     0,     0,  -128,  -128,     0,
  -128,  -128,  -128,  -128,  -128,  -128,  -128,  -128,     1,    97,
    98,     4,     5,     0,     0,     0,     0,     8,     0,     0,
    99,     0,    13,    14,     0,    16,     0,     0,     0,     0,
     0,    19,  -128,     0,     0,     0,  -128,  -128,     0,     1,
    97,    98,     4,     5,     0,  -128,  -128,     0,     8,     0,
     0,    99,     0,    13,    14,     0,    16,     0,     0,    34,
    35,     0,    19,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   100,    37,    38,   259,   101,
     0,    40,     0,     0,     0,     0,    41,    42,    43,    44,
    34,    35,     1,    97,    98,     4,     5,     0,     0,     0,
     0,     8,     0,     0,    99,     0,   100,    37,    38,    16,
   101,   300,    40,   353,     0,     0,     0,    41,    42,    43,
    44,     1,    97,    98,     4,     5,     0,     0,     0,     0,
     8,     0,     0,    99,     0,    13,    14,     0,    16,     0,
     0,   156,   157,     0,    19,     0,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,     0,     0,   100,
    37,    38,     0,   101,     0,    40,     0,     0,     0,     0,
     0,     0,    34,    35,   200,   201,     0,     0,     0,     0,
   169,     0,     0,     9,     0,   202,   200,   201,   100,    37,
    38,     0,   101,     0,    40,     9,     0,     0,     0,    41,
    42,    43,    44,     0,     0,    24,    25,     0,    26,    27,
    28,    29,    30,    31,     0,     0,     0,    24,    25,     0,
    26,    27,    28,    29,    30,    31
};

static const short yycheck[] = {    17,
    12,    23,   127,    87,     0,   223,   212,    10,   143,     1,
    22,    13,    14,    52,   149,    72,   301,    19,    89,     1,
    51,    39,     1,     6,     7,    72,    38,     1,     1,    89,
     1,    89,    34,    35,    78,   170,    37,    80,    78,    41,
    42,    43,    44,   295,    73,   339,   117,    72,   333,    78,
    94,    94,   304,    92,    94,     6,     7,   117,   205,   117,
   195,    72,   197,   357,     1,   212,     3,     4,     5,     6,
     7,   102,    75,    74,    73,    12,    74,   362,    15,    78,
    17,    18,   376,    20,    96,   337,    78,    70,    70,    26,
   296,    87,   377,    94,    75,    72,    70,    78,    74,    78,
   225,    70,    94,   115,    80,   123,   118,    70,   120,   121,
    73,   329,    94,   131,   366,    94,   251,    54,    55,    70,
    94,    94,   140,    94,    75,    73,    73,    79,    71,    70,
    78,    78,    72,    70,    71,    72,    76,    74,   150,    76,
    80,   153,    85,    86,    81,    82,    83,    84,    56,    57,
    58,     3,     4,     5,     6,     7,    78,    94,    89,    73,
    12,    13,   297,    15,    78,    17,    18,    73,    20,   171,
   172,   173,    78,    73,    26,    70,    91,    72,    78,    24,
    25,   306,    27,    72,    81,    82,    70,    76,   323,    73,
   325,    80,   317,   328,   179,   180,   181,   182,   183,   184,
   185,    72,    54,    55,    73,    50,    51,    73,    90,    78,
    53,    73,    78,   338,    70,   237,    78,   352,    70,    71,
    72,    72,    74,    70,    76,    22,    73,    13,    14,    81,
    82,    83,    84,    19,    73,   319,    73,    54,    55,    78,
   365,    78,    87,    88,    79,   241,    33,    34,    34,    35,
   375,    46,    47,    48,    49,    41,    42,    43,    44,    79,
     3,     4,     5,     6,     7,    79,   391,     4,     5,    12,
    77,    78,    15,    78,    17,    18,    13,    20,    15,   186,
   187,   188,   189,    26,   176,   177,   178,    70,   300,   301,
   308,    70,   310,    70,   312,    77,    78,   309,    35,    36,
    78,    38,    39,    40,    41,    42,    43,    77,    78,    93,
    96,    54,    55,    78,    79,   174,   175,   395,   396,    79,
    78,   333,   334,   319,    79,    94,    74,    70,    71,    72,
    72,    74,    72,    76,    77,     4,     5,    34,    81,    82,
    83,    84,    70,   361,    13,    70,    15,    79,    72,   367,
   362,   373,    24,    79,    70,    74,    70,   369,    79,    94,
   378,    79,    23,     9,    73,   377,    35,    36,    73,    38,
    39,    40,    41,    42,    43,    79,   394,   395,   396,    94,
    73,   399,     0,   401,   402,   171,   172,   173,   174,   175,
   176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
   186,   187,   188,   189,   190,   191,   192,   193,   194,     3,
     4,     5,     6,     7,     8,    75,     0,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,   255,
     8,   250,    26,     8,    28,    29,   190,    31,    32,   191,
   193,    35,    36,   192,    38,    39,    40,    41,    42,    43,
    44,    45,   387,   194,   371,    -1,    33,   238,    -1,    -1,
    54,    55,    -1,    -1,    -1,   241,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    -1,
    74,    75,    76,    -1,    -1,    -1,    -1,    81,    82,    83,
    84,    -1,    -1,     3,     4,     5,     6,     7,     8,    -1,
    94,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    -1,    -1,    -1,    26,    -1,    28,    29,
    -1,    31,    32,    -1,    -1,    35,    36,    -1,    38,    39,
    40,    41,    42,    43,    44,    45,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    54,    55,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    70,    71,    72,    -1,    74,    75,    76,    -1,    -1,    -1,
    -1,    81,    82,    83,    84,    -1,    -1,     3,     4,     5,
     6,     7,     8,    -1,    94,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,
    26,    -1,    28,    29,    -1,    31,    32,    -1,    -1,    35,
    36,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,    55,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    70,    71,    72,    -1,    74,    75,
    76,    -1,    -1,    -1,    -1,    81,    82,    83,    84,    -1,
    -1,     3,     4,     5,     6,     7,     8,    -1,    94,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    -1,    -1,    -1,    26,    -1,    28,    29,    -1,    31,
    32,    -1,    -1,    35,    36,    -1,    38,    39,    40,    41,
    42,    43,    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    54,    55,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,
    72,    -1,    74,    75,    76,    -1,    -1,    -1,    -1,    81,
    82,    83,    84,    -1,    -1,     3,     4,     5,     6,     7,
     8,    -1,    94,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    -1,    -1,    -1,    26,    -1,
    28,    29,    -1,    31,    32,    -1,    -1,    35,    36,    -1,
    38,    39,    40,    41,    42,    43,    44,    45,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    54,    55,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    70,    71,    72,    -1,    74,    75,    76,    -1,
    -1,    -1,    -1,    81,    82,    83,    84,    -1,    -1,     3,
     4,     5,     6,     7,     8,    -1,    94,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    -1,
    -1,    -1,    26,    -1,    28,    29,    -1,    31,    32,    -1,
    -1,    35,    36,    -1,    38,    39,    40,    41,    42,    43,
    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    54,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    -1,
    74,    -1,    76,    -1,    -1,    -1,    -1,    81,    82,    83,
    84,    -1,    -1,     3,     4,     5,     6,     7,     8,    -1,
    94,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    -1,    -1,    -1,    26,    -1,    28,    29,
    -1,    31,    32,    -1,    -1,    35,    36,    -1,    38,    39,
    40,    41,    42,    43,    44,    45,    -1,    -1,    -1,    -1,
    -1,    54,    55,    -1,    54,    55,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    -1,    -1,    -1,
    70,    71,    72,    -1,    74,    -1,    76,    -1,    -1,    -1,
    -1,    81,    82,    83,    84,    -1,    -1,    -1,    -1,    -1,
    93,    -1,     0,    -1,    94,     3,     4,     5,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    -1,    -1,    26,    -1,
    28,    29,    -1,    31,    32,    -1,    -1,    35,    36,    -1,
    38,    39,    40,    41,    42,    43,    44,    45,     3,     4,
     5,     6,     7,    -1,    -1,    -1,    -1,    12,    -1,    -1,
    15,    -1,    17,    18,    -1,    20,    -1,    -1,    -1,    -1,
    -1,    26,    70,    -1,    -1,    -1,    74,    75,    -1,     3,
     4,     5,     6,     7,    -1,    83,    84,    -1,    12,    -1,
    -1,    15,    -1,    17,    18,    -1,    20,    -1,    -1,    54,
    55,    -1,    26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    -1,    76,    -1,    -1,    -1,    -1,    81,    82,    83,    84,
    54,    55,     3,     4,     5,     6,     7,    -1,    -1,    -1,
    -1,    12,    -1,    -1,    15,    -1,    70,    71,    72,    20,
    74,    24,    76,    77,    -1,    -1,    -1,    81,    82,    83,
    84,     3,     4,     5,     6,     7,    -1,    -1,    -1,    -1,
    12,    -1,    -1,    15,    -1,    17,    18,    -1,    20,    -1,
    -1,    54,    55,    -1,    26,    -1,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    -1,    -1,    70,
    71,    72,    -1,    74,    -1,    76,    -1,    -1,    -1,    -1,
    -1,    -1,    54,    55,     4,     5,    -1,    -1,    -1,    -1,
    93,    -1,    -1,    13,    -1,    15,     4,     5,    70,    71,
    72,    -1,    74,    -1,    76,    13,    -1,    -1,    -1,    81,
    82,    83,    84,    -1,    -1,    35,    36,    -1,    38,    39,
    40,    41,    42,    43,    -1,    -1,    -1,    35,    36,    -1,
    38,    39,    40,    41,    42,    43
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.27.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 216 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 174 "grammar.y"
{ yyval.node = new QSNullNode(); ;
    break;}
case 2:
#line 175 "grammar.y"
{ yyval.node = new QSBooleanNode(true); ;
    break;}
case 3:
#line 176 "grammar.y"
{ yyval.node = new QSBooleanNode(false); ;
    break;}
case 4:
#line 177 "grammar.y"
{ yyval.node = new QSNumberNode(yyvsp[0].dval); ;
    break;}
case 5:
#line 178 "grammar.y"
{ yyval.node = new QSStringNode(yyvsp[0].ustr); delete yyvsp[0].ustr; ;
    break;}
case 6:
#line 179 "grammar.y"
{ QSLexer *l = QSLexer::lexer();
                                     if (!l->scanRegExp()) YYABORT;
                                     yyval.node = new QSRegExpNode(l->pattern,l->flags);;
    break;}
case 7:
#line 185 "grammar.y"
{ yyval.node = new QSThisNode(); ;
    break;}
case 8:
#line 186 "grammar.y"
{ yyval.node = new QSResolveNode(yyvsp[0].ustr);
                                     delete yyvsp[0].ustr; ;
    break;}
case 11:
#line 190 "grammar.y"
{ yyval.node = new QSGroupNode(yyvsp[-1].node); ;
    break;}
case 12:
#line 191 "grammar.y"
{ yyval.node = new QSObjectLiteralNode(0L); ;
    break;}
case 13:
#line 192 "grammar.y"
{ yyval.node = new QSObjectLiteralNode(yyvsp[-1].node); ;
    break;}
case 14:
#line 196 "grammar.y"
{ yyval.node = new QSArrayNode(yyvsp[-1].eli); ;
    break;}
case 15:
#line 197 "grammar.y"
{ yyval.node = new QSArrayNode(yyvsp[-1].elm); ;
    break;}
case 16:
#line 198 "grammar.y"
{ yyval.node = new QSArrayNode(yyvsp[-1].eli, yyvsp[-3].elm); ;
    break;}
case 17:
#line 202 "grammar.y"
{ yyval.elm = new QSElementNode(yyvsp[-1].eli, yyvsp[0].node); ;
    break;}
case 18:
#line 204 "grammar.y"
{ yyval.elm = new QSElementNode(yyvsp[-3].elm, yyvsp[-1].eli, yyvsp[0].node); ;
    break;}
case 19:
#line 208 "grammar.y"
{ yyval.eli = 0L; ;
    break;}
case 21:
#line 213 "grammar.y"
{ yyval.eli = new QSElisionNode(0L); ;
    break;}
case 22:
#line 214 "grammar.y"
{ yyval.eli = new QSElisionNode(yyvsp[-1].eli); ;
    break;}
case 23:
#line 218 "grammar.y"
{ yyval.node = new QSPropertyValueNode(yyvsp[-2].node, yyvsp[0].node); ;
    break;}
case 24:
#line 220 "grammar.y"
{ yyval.node = new QSPropertyValueNode(yyvsp[-2].node, yyvsp[0].node, yyvsp[-4].node); ;
    break;}
case 25:
#line 224 "grammar.y"
{ yyval.node = new QSPropertyNode(yyvsp[0].ustr);
                                     delete yyvsp[0].ustr; ;
    break;}
case 26:
#line 226 "grammar.y"
{ yyval.node = new QSPropertyNode(yyvsp[0].ustr); delete yyvsp[0].ustr; ;
    break;}
case 27:
#line 227 "grammar.y"
{ yyval.node = new QSPropertyNode(yyvsp[0].dval); ;
    break;}
case 30:
#line 233 "grammar.y"
{ yyval.node = new QSAccessorNode1(yyvsp[-3].node, yyvsp[-1].node); ;
    break;}
case 31:
#line 234 "grammar.y"
{ yyval.node = new QSAccessorNode2(yyvsp[-2].node, yyvsp[0].ustr);
                                     delete yyvsp[0].ustr; ;
    break;}
case 32:
#line 236 "grammar.y"
{ yyval.node = new QSNewExprNode(yyvsp[-1].node, yyvsp[0].args); ;
    break;}
case 34:
#line 241 "grammar.y"
{ yyval.node = new QSNewExprNode(yyvsp[0].node); ;
    break;}
case 35:
#line 245 "grammar.y"
{ yyval.node = new QSFunctionCallNode(yyvsp[-1].node, yyvsp[0].args); ;
    break;}
case 36:
#line 246 "grammar.y"
{ yyval.node = new QSFunctionCallNode(yyvsp[-1].node, yyvsp[0].args); ;
    break;}
case 37:
#line 247 "grammar.y"
{ yyval.node = new QSAccessorNode1(yyvsp[-3].node, yyvsp[-1].node); ;
    break;}
case 38:
#line 248 "grammar.y"
{ yyval.node = new QSAccessorNode2(yyvsp[-2].node, yyvsp[0].ustr);
                                     delete yyvsp[0].ustr; ;
    break;}
case 39:
#line 253 "grammar.y"
{ yyval.args = new QSArgumentsNode(0L); ;
    break;}
case 40:
#line 254 "grammar.y"
{ yyval.args = new QSArgumentsNode(yyvsp[-1].alist); ;
    break;}
case 41:
#line 258 "grammar.y"
{ yyval.alist = new QSArgumentListNode(yyvsp[0].node); ;
    break;}
case 42:
#line 259 "grammar.y"
{ yyval.alist = new QSArgumentListNode(yyvsp[-2].alist, yyvsp[0].node); ;
    break;}
case 46:
#line 269 "grammar.y"
{ yyval.node = new QSPostfixNode(yyvsp[-1].node, OpPlusPlus); ;
    break;}
case 47:
#line 270 "grammar.y"
{ yyval.node = new QSPostfixNode(yyvsp[-1].node, OpMinusMinus); ;
    break;}
case 49:
#line 275 "grammar.y"
{ yyval.node = new QSDeleteNode(yyvsp[0].node); ;
    break;}
case 50:
#line 276 "grammar.y"
{ yyval.node = new QSVoidNode(yyvsp[0].node); ;
    break;}
case 51:
#line 277 "grammar.y"
{ yyval.node = new QSTypeOfNode(yyvsp[0].node); ;
    break;}
case 52:
#line 278 "grammar.y"
{ yyval.node = new QSPrefixNode(OpPlusPlus, yyvsp[0].node); ;
    break;}
case 53:
#line 279 "grammar.y"
{ yyval.node = new QSPrefixNode(OpMinusMinus, yyvsp[0].node); ;
    break;}
case 54:
#line 280 "grammar.y"
{ yyval.node = new QSUnaryPlusNode(yyvsp[0].node); ;
    break;}
case 55:
#line 281 "grammar.y"
{ yyval.node = new QSNegateNode(yyvsp[0].node); ;
    break;}
case 56:
#line 282 "grammar.y"
{ yyval.node = new QSBitwiseNotNode(yyvsp[0].node); ;
    break;}
case 57:
#line 283 "grammar.y"
{ yyval.node = new QSLogicalNotNode(yyvsp[0].node); ;
    break;}
case 59:
#line 288 "grammar.y"
{ yyval.node = new QSMultNode(yyvsp[-2].node, yyvsp[0].node, '*'); ;
    break;}
case 60:
#line 289 "grammar.y"
{ yyval.node = new QSMultNode(yyvsp[-2].node, yyvsp[0].node, '/'); ;
    break;}
case 61:
#line 290 "grammar.y"
{ yyval.node = new QSMultNode(yyvsp[-2].node,yyvsp[0].node,'%'); ;
    break;}
case 63:
#line 295 "grammar.y"
{ yyval.node = new QSAddNode(yyvsp[-2].node, yyvsp[0].node, '+'); ;
    break;}
case 64:
#line 296 "grammar.y"
{ yyval.node = new QSAddNode(yyvsp[-2].node, yyvsp[0].node, '-'); ;
    break;}
case 66:
#line 301 "grammar.y"
{ yyval.node = new QSShiftNode(yyvsp[-2].node, OpLShift, yyvsp[0].node); ;
    break;}
case 67:
#line 302 "grammar.y"
{ yyval.node = new QSShiftNode(yyvsp[-2].node, OpRShift, yyvsp[0].node); ;
    break;}
case 68:
#line 303 "grammar.y"
{ yyval.node = new QSShiftNode(yyvsp[-2].node, OpURShift, yyvsp[0].node); ;
    break;}
case 70:
#line 309 "grammar.y"
{ yyval.node = new QSRelationalNode(yyvsp[-2].node, OpLess, yyvsp[0].node); ;
    break;}
case 71:
#line 311 "grammar.y"
{ yyval.node = new QSRelationalNode(yyvsp[-2].node, OpGreater, yyvsp[0].node); ;
    break;}
case 72:
#line 313 "grammar.y"
{ yyval.node = new QSRelationalNode(yyvsp[-2].node, OpLessEq, yyvsp[0].node); ;
    break;}
case 73:
#line 315 "grammar.y"
{ yyval.node = new QSRelationalNode(yyvsp[-2].node, OpGreaterEq, yyvsp[0].node); ;
    break;}
case 74:
#line 317 "grammar.y"
{ yyval.node = new QSRelationalNode(yyvsp[-2].node, OpIs, yyvsp[0].node); ;
    break;}
case 75:
#line 319 "grammar.y"
{ yyval.node = new QSRelationalNode(yyvsp[-2].node, OpInstanceOf, yyvsp[0].node); ;
    break;}
case 76:
#line 321 "grammar.y"
{ yyval.node = new QSRelationalNode(yyvsp[-2].node, OpIn, yyvsp[0].node); ;
    break;}
case 78:
#line 326 "grammar.y"
{ yyval.node = new QSEqualNode(yyvsp[-2].node, OpEqEq, yyvsp[0].node); ;
    break;}
case 79:
#line 327 "grammar.y"
{ yyval.node = new QSEqualNode(yyvsp[-2].node, OpNotEq, yyvsp[0].node); ;
    break;}
case 80:
#line 328 "grammar.y"
{ yyval.node = new QSEqualNode(yyvsp[-2].node, OpStrEq, yyvsp[0].node); ;
    break;}
case 81:
#line 329 "grammar.y"
{ yyval.node = new QSEqualNode(yyvsp[-2].node, OpStrNEq, yyvsp[0].node);;
    break;}
case 83:
#line 334 "grammar.y"
{ yyval.node = new QSBitOperNode(yyvsp[-2].node, OpBitAnd, yyvsp[0].node); ;
    break;}
case 85:
#line 339 "grammar.y"
{ yyval.node = new QSBitOperNode(yyvsp[-2].node, OpBitXOr, yyvsp[0].node); ;
    break;}
case 87:
#line 344 "grammar.y"
{ yyval.node = new QSBitOperNode(yyvsp[-2].node, OpBitOr, yyvsp[0].node); ;
    break;}
case 89:
#line 350 "grammar.y"
{ yyval.node = new QSBinaryLogicalNode(yyvsp[-2].node, OpAnd, yyvsp[0].node); ;
    break;}
case 91:
#line 356 "grammar.y"
{ yyval.node = new QSBinaryLogicalNode(yyvsp[-2].node, OpOr, yyvsp[0].node); ;
    break;}
case 93:
#line 362 "grammar.y"
{ yyval.node = new QSConditionalNode(yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].node); ;
    break;}
case 95:
#line 368 "grammar.y"
{ yyval.node = new QSAssignNode(yyvsp[-2].node, yyvsp[-1].op, yyvsp[0].node);;
    break;}
case 96:
#line 372 "grammar.y"
{ yyval.op = OpEqual; ;
    break;}
case 97:
#line 373 "grammar.y"
{ yyval.op = OpPlusEq; ;
    break;}
case 98:
#line 374 "grammar.y"
{ yyval.op = OpMinusEq; ;
    break;}
case 99:
#line 375 "grammar.y"
{ yyval.op = OpMultEq; ;
    break;}
case 100:
#line 376 "grammar.y"
{ yyval.op = OpDivEq; ;
    break;}
case 101:
#line 377 "grammar.y"
{ yyval.op = OpLShift; ;
    break;}
case 102:
#line 378 "grammar.y"
{ yyval.op = OpRShift; ;
    break;}
case 103:
#line 379 "grammar.y"
{ yyval.op = OpURShift; ;
    break;}
case 104:
#line 380 "grammar.y"
{ yyval.op = OpAndEq; ;
    break;}
case 105:
#line 381 "grammar.y"
{ yyval.op = OpXOrEq; ;
    break;}
case 106:
#line 382 "grammar.y"
{ yyval.op = OpOrEq; ;
    break;}
case 107:
#line 383 "grammar.y"
{ yyval.op = OpModEq; ;
    break;}
case 109:
#line 388 "grammar.y"
{ yyval.node = new QSCommaNode(yyvsp[-2].node, yyvsp[0].node); ;
    break;}
case 112:
#line 394 "grammar.y"
{ yyval.stat = yyvsp[0].clss; ;
    break;}
case 113:
#line 395 "grammar.y"
{ yyvsp[0].clss->setAttributes( yyvsp[-1].attrs ); yyval.stat = yyvsp[0].clss; ;
    break;}
case 128:
#line 413 "grammar.y"
{ yyval.stat = new QSBlockNode(0L); DBG(yyval.stat, yylsp[0], yylsp[0]); ;
    break;}
case 129:
#line 414 "grammar.y"
{ yyval.stat = new QSBlockNode(yyvsp[-1].slist); DBG(yyval.stat, yylsp[0], yylsp[0]); ;
    break;}
case 130:
#line 418 "grammar.y"
{ yyval.slist = new QSStatListNode(yyvsp[0].stat); ;
    break;}
case 131:
#line 419 "grammar.y"
{ yyval.slist = new QSStatListNode(yyvsp[-1].slist, yyvsp[0].stat); ;
    break;}
case 132:
#line 423 "grammar.y"
{ yyval.stat = new QSEmptyStatementNode(); ;
    break;}
case 133:
#line 427 "grammar.y"
{ yyval.stat = new QSExprStatementNode(yyvsp[-1].node);
                                     DBG(yyval.stat, yylsp[-1], yylsp[0]); ;
    break;}
case 134:
#line 429 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new QSExprStatementNode(yyvsp[-1].node);
				       DBG(yyval.stat, yylsp[-1], yylsp[-1]);
                                     } else
				       YYABORT; ;
    break;}
case 135:
#line 437 "grammar.y"
{ yyval.stat = new QSIfNode(yyvsp[-2].node,yyvsp[0].stat,0L);DBG(yyval.stat,yylsp[-4],yylsp[-1]); ;
    break;}
case 136:
#line 439 "grammar.y"
{ yyval.stat = new QSIfNode(yyvsp[-4].node,yyvsp[-2].stat,yyvsp[0].stat);DBG(yyval.stat,yylsp[-6],yylsp[-3]); ;
    break;}
case 137:
#line 443 "grammar.y"
{ yyval.stat=new QSDoWhileNode(yyvsp[-4].stat,yyvsp[-1].node);DBG(yyval.stat,yylsp[-5],yylsp[-3]);;
    break;}
case 138:
#line 444 "grammar.y"
{ yyval.stat = new QSWhileNode(yyvsp[-2].node,yyvsp[0].stat);DBG(yyval.stat,yylsp[-4],yylsp[-1]); ;
    break;}
case 139:
#line 446 "grammar.y"
{ yyval.stat = new QSForNode(yyvsp[-6].node,yyvsp[-4].node,yyvsp[-2].node,yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-8],yylsp[-1]); ;
    break;}
case 140:
#line 449 "grammar.y"
{ yyval.stat = new QSForNode(yyvsp[-6].blist,yyvsp[-4].node,yyvsp[-2].node,yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-9],yylsp[-1]); ;
    break;}
case 141:
#line 452 "grammar.y"
{ yyval.stat = new QSForInNode(yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-6],yylsp[-1]); ;
    break;}
case 142:
#line 455 "grammar.y"
{ yyval.stat = new QSForInNode(yyvsp[-4].vbin,yyvsp[-2].node,yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-7],yylsp[-1]); ;
    break;}
case 143:
#line 460 "grammar.y"
{ yyval.node = 0L; ;
    break;}
case 145:
#line 465 "grammar.y"
{ yyval.stat = new QSContinueNode(); DBG(yyval.stat,yylsp[-1],yylsp[0]); ;
    break;}
case 146:
#line 466 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new QSContinueNode(); DBG(yyval.stat,yylsp[-1],yylsp[0]);
                                     } else
				       YYABORT; ;
    break;}
case 147:
#line 470 "grammar.y"
{ yyval.stat = new QSContinueNode(yyvsp[-1].ustr); DBG(yyval.stat,yylsp[-2],yylsp[0]);
                                     delete yyvsp[-1].ustr; ;
    break;}
case 148:
#line 472 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new QSContinueNode(yyvsp[-1].ustr);DBG(yyval.stat,yylsp[-2],yylsp[-1]);
				       delete yyvsp[-1].ustr;
                                     } else
				       YYABORT; ;
    break;}
case 149:
#line 480 "grammar.y"
{ yyval.stat = new QSBreakNode();DBG(yyval.stat,yylsp[-1],yylsp[0]); ;
    break;}
case 150:
#line 481 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new QSBreakNode(); DBG(yyval.stat,yylsp[-1],yylsp[-1]);
                                     } else
				       YYABORT; ;
    break;}
case 151:
#line 485 "grammar.y"
{ yyval.stat = new QSBreakNode(yyvsp[-1].ustr); DBG(yyval.stat,yylsp[-2],yylsp[0]);
                                     delete yyvsp[-1].ustr; ;
    break;}
case 152:
#line 487 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new QSBreakNode(yyvsp[-1].ustr); DBG(yyval.stat,yylsp[-2],yylsp[-1]);
				       delete yyvsp[-1].ustr;
                                     } else
				       YYABORT;
                                   ;
    break;}
case 153:
#line 496 "grammar.y"
{ yyval.stat = new QSReturnNode(0L); DBG(yyval.stat,yylsp[-1],yylsp[0]); ;
    break;}
case 154:
#line 497 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new QSReturnNode(0L); DBG(yyval.stat,yylsp[-1],yylsp[-1]);
                                     } else
				       YYABORT; ;
    break;}
case 155:
#line 501 "grammar.y"
{ yyval.stat = new QSReturnNode(yyvsp[-1].node); DBG(yyval.stat,yylsp[-2],yylsp[-1]); ;
    break;}
case 156:
#line 502 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new QSReturnNode(yyvsp[-1].node);
                                       DBG(yyval.stat,yylsp[-2],yylsp[-1]);
                                     } else {
				       YYABORT;
				     }
                                   ;
    break;}
case 157:
#line 512 "grammar.y"
{ yyval.stat = new QSWithNode(yyvsp[-2].node,yyvsp[0].stat);
                                     DBG(yyval.stat, yylsp[-4], yylsp[-1]); ;
    break;}
case 158:
#line 517 "grammar.y"
{ yyval.stat = new QSSwitchNode(yyvsp[-2].node, yyvsp[0].cblk);
                                     DBG(yyval.stat, yylsp[-4], yylsp[-1]); ;
    break;}
case 159:
#line 522 "grammar.y"
{ yyval.cblk = new QSCaseBlockNode(yyvsp[-1].clist, 0L, 0L); ;
    break;}
case 160:
#line 524 "grammar.y"
{ yyval.cblk = new QSCaseBlockNode(yyvsp[-3].clist, yyvsp[-2].ccl, yyvsp[-1].clist); ;
    break;}
case 161:
#line 528 "grammar.y"
{ yyval.clist = 0L; ;
    break;}
case 163:
#line 533 "grammar.y"
{ yyval.clist = new QSClauseListNode(yyvsp[0].ccl); ;
    break;}
case 164:
#line 534 "grammar.y"
{ yyval.clist = yyvsp[-1].clist->append(yyvsp[0].ccl); ;
    break;}
case 165:
#line 538 "grammar.y"
{ yyval.ccl = new QSCaseClauseNode(yyvsp[-1].node, 0L); ;
    break;}
case 166:
#line 539 "grammar.y"
{ yyval.ccl = new QSCaseClauseNode(yyvsp[-2].node, yyvsp[0].slist); ;
    break;}
case 167:
#line 543 "grammar.y"
{ yyval.ccl = new QSCaseClauseNode(0L, 0L);; ;
    break;}
case 168:
#line 544 "grammar.y"
{ yyval.ccl = new QSCaseClauseNode(0L, yyvsp[0].slist); ;
    break;}
case 169:
#line 548 "grammar.y"
{ yyvsp[0].stat->pushLabel(yyvsp[-2].ustr);
                                     yyval.stat = new QSLabelNode(yyvsp[-2].ustr, yyvsp[0].stat);
                                     delete yyvsp[-2].ustr; ;
    break;}
case 170:
#line 554 "grammar.y"
{ yyval.stat = new QSThrowNode(yyvsp[-1].node); ;
    break;}
case 171:
#line 558 "grammar.y"
{ yyval.stat = new QSTryNode(yyvsp[-1].stat, yyvsp[0].node); ;
    break;}
case 172:
#line 559 "grammar.y"
{ yyval.stat = new QSTryNode(yyvsp[-1].stat, 0L, yyvsp[0].node); ;
    break;}
case 173:
#line 560 "grammar.y"
{ yyval.stat = new QSTryNode(yyvsp[-2].stat, yyvsp[-1].node, yyvsp[0].node); ;
    break;}
case 174:
#line 564 "grammar.y"
{ yyval.node = new QSCatchNode(yyvsp[-2].ustr, yyvsp[0].stat); delete yyvsp[-2].ustr; ;
    break;}
case 175:
#line 568 "grammar.y"
{ yyval.node = new QSFinallyNode(yyvsp[0].stat); ;
    break;}
case 176:
#line 573 "grammar.y"
{ yyval.stat = new QSPackageNode(yyvsp[-1].ustr, yyvsp[0].body);
                                     delete yyvsp[-1].ustr; ;
    break;}
case 177:
#line 578 "grammar.y"
{ yyval.stat = new QSImportNode(yyvsp[-1].ustr); delete yyvsp[-1].ustr; ;
    break;}
case 178:
#line 582 "grammar.y"
{ yyval.ustr = yyvsp[0].ustr; delete yyvsp[0].ustr; ;
    break;}
case 179:
#line 583 "grammar.y"
{ *yyval.ustr += QString::fromLatin1(".") + *yyvsp[0].ustr; delete yyvsp[0].ustr; ;
    break;}
case 180:
#line 588 "grammar.y"
{ yyval.func = new QSFuncDeclNode(yyvsp[-4].ustr, 0L, yyvsp[-1].type, yyvsp[0].body); delete yyvsp[-4].ustr; ;
    break;}
case 181:
#line 590 "grammar.y"
{ yyval.func = new QSFuncDeclNode(yyvsp[-5].ustr, yyvsp[-3].param, yyvsp[-1].type, yyvsp[0].body); delete yyvsp[-5].ustr; ;
    break;}
case 182:
#line 592 "grammar.y"
{ yyval.func = new QSFuncDeclNode(yyvsp[-4].ustr, 0L, yyvsp[-1].type, yyvsp[0].body);
			  yyval.func->setAttributes( yyvsp[-6].attrs ); delete yyvsp[-4].ustr; ;
    break;}
case 183:
#line 595 "grammar.y"
{ yyval.func = new QSFuncDeclNode(yyvsp[-5].ustr, yyvsp[-3].param, yyvsp[-1].type, yyvsp[0].body);
                          yyval.func->setAttributes( yyvsp[-7].attrs ); delete yyvsp[-5].ustr; ;
    break;}
case 184:
#line 600 "grammar.y"
{ yyval.type = 0L; ;
    break;}
case 185:
#line 601 "grammar.y"
{ yyval.type = yyvsp[0].type; ;
    break;}
case 186:
#line 605 "grammar.y"
{ yyval.node = new QSFuncExprNode(0L, yyvsp[0].body); ;
    break;}
case 187:
#line 607 "grammar.y"
{ yyval.node = new QSFuncExprNode(yyvsp[-2].param, yyvsp[0].body); ;
    break;}
case 188:
#line 612 "grammar.y"
{ yyval.param = new QSParameterNode(yyvsp[0].ustr, 0L);
                                     delete yyvsp[0].ustr; ;
    break;}
case 189:
#line 614 "grammar.y"
{ yyval.param = new QSParameterNode(yyvsp[-2].ustr, yyvsp[0].type);
                                     delete yyvsp[-2].ustr; ;
    break;}
case 190:
#line 616 "grammar.y"
{ yyval.param = yyvsp[-2].param->append(yyvsp[0].ustr, 0L); delete yyvsp[0].ustr; ;
    break;}
case 191:
#line 618 "grammar.y"
{ yyval.param = yyvsp[-4].param->append(yyvsp[-2].ustr, yyvsp[0].type); delete yyvsp[-2].ustr; ;
    break;}
case 192:
#line 622 "grammar.y"
{ yyval.body = new QSFunctionBodyNode(0L); ;
    break;}
case 193:
#line 623 "grammar.y"
{ yyval.body = new QSFunctionBodyNode(yyvsp[-1].srcs); ;
    break;}
case 194:
#line 627 "grammar.y"
{ yyval.clss = new QSClassDefNode(yyvsp[-1].ustr, 0L, 0L);
                                     delete yyvsp[-1].ustr; ;
    break;}
case 195:
#line 629 "grammar.y"
{ yyval.clss = new QSClassDefNode(yyvsp[-1].ustr, 0L, yyvsp[0].body);
                                     delete yyvsp[-1].ustr; ;
    break;}
case 196:
#line 632 "grammar.y"
{ yyval.clss = new QSClassDefNode(yyvsp[-3].ustr, yyvsp[-1].type, yyvsp[0].body);
                                     delete yyvsp[-3].ustr; ;
    break;}
case 197:
#line 637 "grammar.y"
{ yyval.prog = new QSProgramNode(0L); ;
    break;}
case 198:
#line 638 "grammar.y"
{ yyval.prog = new QSProgramNode(yyvsp[0].srcs); ;
    break;}
case 199:
#line 642 "grammar.y"
{ yyval.srcs = new QSSourceElementsNode(yyvsp[0].src); ;
    break;}
case 200:
#line 643 "grammar.y"
{ yyval.srcs = new QSSourceElementsNode(yyvsp[-1].srcs, yyvsp[0].src); ;
    break;}
case 201:
#line 647 "grammar.y"
{ yyval.src = new QSSourceElementNode(yyvsp[0].stat); ;
    break;}
case 202:
#line 648 "grammar.y"
{ yyval.src = new QSSourceElementNode(yyvsp[0].func); ;
    break;}
case 203:
#line 652 "grammar.y"
{ yyval.attrs = new QSAttributeNode(yyvsp[0].attr); ;
    break;}
case 204:
#line 653 "grammar.y"
{ yyvsp[-1].attrs->add(yyvsp[0].attr); yyval.attrs = yyvsp[-1].attrs; ;
    break;}
case 205:
#line 657 "grammar.y"
{ yyval.attr = AttributeAbstract; ;
    break;}
case 206:
#line 658 "grammar.y"
{ yyval.attr = AttributeFinal; ;
    break;}
case 207:
#line 659 "grammar.y"
{ yyval.attr = AttributePrivate; ;
    break;}
case 208:
#line 660 "grammar.y"
{ yyval.attr = AttributePublic; ;
    break;}
case 209:
#line 661 "grammar.y"
{ yyval.attr = AttributeStatic; ;
    break;}
case 210:
#line 662 "grammar.y"
{ yyval.attr = AttributeTrue; ;
    break;}
case 211:
#line 663 "grammar.y"
{ yyval.attr = AttributeFalse; ;
    break;}
case 212:
#line 664 "grammar.y"
{ yyval.attr = AttributeConstructor; ;
    break;}
case 213:
#line 671 "grammar.y"
{ yyval.stat = new QSVarDefNode(yyvsp[-1].ival, yyvsp[0].blist); DBG(yyval.stat, yylsp[-1], yylsp[0]); ;
    break;}
case 214:
#line 673 "grammar.y"
{ yyval.stat = new QSVarDefNode(yyvsp[-1].ival, yyvsp[0].blist); DBG(yyval.stat, yylsp[-2], yylsp[0]);
                               ((QSVarDefNode*)yyval.stat)->setAttributes( yyvsp[-2].attrs ); ;
    break;}
case 215:
#line 678 "grammar.y"
{ yyval.ival = 0; ;
    break;}
case 216:
#line 679 "grammar.y"
{ yyval.ival = 1; ;
    break;}
case 217:
#line 683 "grammar.y"
{ yyval.blist = new QSVarBindingListNode(0L, yyvsp[0].vbin); ;
    break;}
case 218:
#line 685 "grammar.y"
{ yyval.blist = new QSVarBindingListNode(yyvsp[-2].blist, yyvsp[0].vbin); ;
    break;}
case 219:
#line 689 "grammar.y"
{ yyval.vbin = new QSVarBindingNode(yyvsp[0].tvar, 0L); ;
    break;}
case 220:
#line 690 "grammar.y"
{ yyval.vbin = new QSVarBindingNode(yyvsp[-2].tvar, yyvsp[0].node); ;
    break;}
case 221:
#line 694 "grammar.y"
{ yyval.tvar = new QSTypedVarNode(yyvsp[0].ustr, 0L);
                                     delete yyvsp[0].ustr; ;
    break;}
case 222:
#line 696 "grammar.y"
{ yyval.tvar = new QSTypedVarNode(yyvsp[-2].ustr, yyvsp[0].type);
                                     delete yyvsp[-2].ustr; ;
    break;}
case 223:
#line 703 "grammar.y"
{ yyval.type = new QSTypeNode(yyvsp[0].ustr); delete yyvsp[0].ustr; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 542 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 706 "grammar.y"


int yyerror ( const char *errstr )  /* Called by yyparse on error */
{
  QSLexer::lexer()->setErrorMessage( errstr );
  return 1;
}

/* may we automatically insert a semicolon ? */
bool automatic()
{
  if ( yychar == '}' || yychar == 0 )
    return true;
  else if ( QSLexer::lexer()->prevTerminator() )
    return true;

  return false;
}
