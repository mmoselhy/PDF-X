<sect1 id="kernel_part_filters_chapter">

  <title>Stream encoding</title>
  <para>
  Pdf streams can be encoded using one or more filters specified by pdf specification.
  The encoding/decoding algorithm is called a filter. There are two types of filters 
  <itemizedlist mark="opencircle">
	<listitem><para>ASCII filters - enable decoding of arbitrary 8-bit binary data that has been encoded as ASCII text</para></listitem>
	<listitem><para>(de)compression filters - enable decoding of data that has been compressed</para></listitem>
  </itemizedlist>
  There is a set of filters which every pdf viewer must implement.
  It is up to the viewer how it handles an unknown filter. 
  </para>

 <sect2 id="xpdf_filters"><title>Xpdf filters</title>
  <para>Xpdf viewer implements all decoding filters from pdf specification v1.5. However it
  does not implement any encoding filters (it does not need them). 
  
 	<mediaobject>
	  <imageobject>
	   <imagedata fileref="kernel/images/xpdf_streams_simple.png" format="PNG" />
	  </imageobject>
	  <textobject><phrase>Simple xpdf stream hierarchy</phrase></textobject>
	  <caption><para>Simple xpdf stream hierarchy</para></caption>
	</mediaobject>

  Xpdf stream design is good but can be improved. The design resulted into many objects 
  that are tightly coupled together (see picture). They can be decoupled using <xref linkend="facade"/> which also
  makes objects more reusable.
  
  Finally, the unclear implementation makes it difficult to use and very difficult to extend and
  it lacks almost any fault tolerance.
  We use xpdf filters (because it is hardwired into xpdf parsing) only to decode data but we design our own encoding filters.
  </para>
 </sect2>
 
  <sect2 id="encoding_filter_design"><title>Encoding filter design</title>
  <para>
	  Our implementation is based on simple observation that we don't have to bother with 
	  stream data encoding until we actualy need to write them to the file. In the meantime
	  we can use unencoded data in their raw format. This way we can prevent from 
	  useless encoding/decoding when modifying data several times.
  </para>
  <para>
	  Therefore we have moved whole encoding to the code writing code path which is under
	  responsibility of IPdfWriter class implementation which uses FilterStreamWriter class
	  to provide proper implemenation for data encoding. OldStylePdfWriter (current implementation
	  of the IPdfWriter) uses FilterStreamWriter factory interface (see below) to get
	  proper FilterStreamWriter implementation which is used for stream object writing.
  </para>
  <para>
To provide easy-to-use and transparent interface we are using the following
hierarchy and class relations:
</para>
<para>
FilterStreamWriter
<itemizedlist>
<listitem>
          provides factory method getInstance which returns proper filter
          writer instance based on the given stream object
</listitem>
<listitem>
         stream writers can be registered in runtime by
          registerFilterStreamWriter method
</listitem>
<listitem>
         if getInstance is not able to find any suitable writer for a given
          object, it will try default writer
</listitem>
<listitem>
         if even default doesn't support given object, it will fall back to
          the NullFilterStreamWriter which writes raw data without any filters.
</listitem>
</itemizedlist>
</para>
<para>
Default filter stream writer is useful for give-at-least some filter if
  the required one is not available (e.g. LZWDecode can be replaced by
  FlateDecode or stack of filters can be replaced by only one of them).
</para>
<para>
  Finally, each filter stream implementation is required to provide:

<itemizedlist>
<listitem>
         supportObject - it understands how to write filtered data
          specified by object.
  </listitem>
<listitem>
         compress - write data from given object to the stream. Note that
          this method can use different filters than specified in the
          object, but it definitely has to write valid object (e.g. stack of
          filters can be reduced or one filter can be replaced by another).
</listitem>
</itemizedlist>
</para>
<para>
	  This design is flexible, easily extensible as we only have to implement the new filter implemenation
	  (FilterStreamWriter descendants) and register them with the FilterStreamWriter::registerFilterStreamWriter
	  method. Each FilterStreamWriter implementation knows which filters it is able to 
	  provide and annouces this information by the FilterStreamWriter::supportObject method.
	  Finally PdfWriter will simply pick up writer which supports current object
	  and writes its content by the FilterStreamWriter::compress method.
  </para>
  </sect2>

 </sect1>
